---
import {dirname,basename} from 'node:path'
import {HeadingLevel} from '../@types/a11y';
import {cn, avoidWidowedWords, emojifyStatus} from '../lib/helpers';
import {Page, toPage} from '../lib/page/Page'
import {loadHTML, html} from '../lib/html';

import BaseLayout from './base.astro';

import {listProjects} from '../pages/projects';
import {listGarden} from '../pages/garden';

import ProjectGrid from '../components/Project/ProjectGrid.tsx';
import GardenList, {GardenListVariant} from '../components/Garden/GardenList.tsx';

import RubberBall from '../components/RubberBall/index.ts';

/** @ts-ignore */
const abspath = import.meta.url.pathname;
const astroContextSymbol = Symbol.for('astro.context');
const astroContext = Astro.props[astroContextSymbol];

let page:Page = toPage({
  layout: abspath,
  ...Astro.props.content,
  [astroContextSymbol]: astroContext
});

interface PageSummary {
  name: string;
  url: Page['url'];
  slug: Page['slug'];
  status: Page['status'];
  publishedAt: Page['publishedAt'];
  content: {
    title: Page['content']['title'];
    subtitle: Page['content']['subtitle'];
  },
  thumbnail: Page['thumbnail'];
  tags: Page['tags'];
  collection?: Page['collection'];
}

const toPageSummary = (page: Page): PageSummary => {
  return {
    name: page.name,
    url: page.url,
    slug: page.slug,
    content: {
      title: page.content.title,
      subtitle: page.content.subtitle,
    },
    thumbnail: page.thumbnail,
    tags: page.tags,
    status: page.status,
    publishedAt: page.publishedAt,
    collection: page.collection ?? [],
  }
}
let projects: PageSummary[] = (await listProjects()).map( toPageSummary );

let gardenItems: PageSummary[] = (await listGarden()).sort( (a,b) => {
  // Order by status (first are complete, then in-progresss, finally draft);
  const statusOrder = {'draft': -1, 'in progress': 0, 'complete': 1};
  const [statusA, statusB] = [statusOrder[a.status], statusOrder[b.status]];
  return statusB - statusA;
}).map( toPageSummary );

let $ = loadHTML(page.content.content);
let title = $('#title');
title.text( avoidWidowedWords(title.text()) );
---

<BaseLayout {page}>
  <div id="content">
    <section class="home" aria-labelledby="welcome">
      <div class="home-grid">
        <div class="item highlight pad4">
          {html( $('#spotlight') )}
          {html( $('#title') )}
          {html( $('#subtitle') ) }
        </div>
      </div>
    </section>

    <section class="projects">
      <h2 class="title1 pad4-y">Projects that i've worked</h2>
      <ProjectGrid
        TitleHeadingLevel={HeadingLevel.h3}
        projects={projects}
        client:idle />
      <div class="pad4"/>
    </section>

    <section class="digital-garden">
      <h2 class="title1 pad4-y">ðŸŒ» Digital Garden</h2>
      <GardenList
        items={gardenItems}
        TitleHeadingLevel={HeadingLevel.h3}
        variant={GardenListVariant.WITH_SUBTITLE} />
      <div class="pad4"/>
    </section>
    <RubberBall client:idle />
  </div>
</BaseLayout>

<style lang="scss" scoped>
@use "sass:math";
@use "src/styles/breakpoints" as bp;
@use "src/styles/grids" as grids;
@use "src/styles/helpers" as h;

#content {
  position: relative;
}

$fold: 90vh;
.home {
  width: 100%;
  height: $fold;
}

.home-grid {
  position: relative;
  height: 100%;

  $gap: 0px;
  @include grids.grid(6, $gap);
  grid-template-rows: repeat(4, math.div( $fold, 4 ));

  :global(.highlight){
    grid-column: 4 / span 4;
    grid-row: 1 / span 4;

    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: center;
    z-index: 1;

    @include bp.breakpoint(medium, min) {
      text-shadow: 0 2px 12px var(--surface1);
    }
    @include bp.breakpoint(medium, max) {
      background: linear-gradient(
        to bottom,
        transparent 0%,
        hsl(var(--brand-hue) var(--brand-saturation) 100% / 0.79) 30%,
        hsl(var(--brand-hue) var(--brand-saturation) 100% / 0.79) 70%,
        transparent 100%
      );
    }

    > :global(.heading-spotlight) {
      font-family: var(--subtitle-family);
      font-size: calc( var(--h1) * 1.1 );
      @include h.weight(var(--subtitle-weight));
    }
    > :global(.heading-title){
      font-family: var(--subtitle-family);
      font-size: calc( var(--h3) );
      @include h.weight(var(--subtitle-weight));

      margin-bottom: 1em;
    }

    > :global(.heading-subtitle) {
      font-size: var(--h5);
    }
  }

  &::after {
    position: absolute;
    isolation: isolate;
    content: ' ';
    background: url('/pictures/Dieffenbachia robusta.png') no-repeat;
    background-position: center bottom;

    @include bp.breakpoint(medium, min) {
      /** Occupy left part of screen */
      background-size: contain;
      bottom: 0;
      left: -2.5%;
      width: 55%;
      height: clamp(400px, 100vh, 800px);
    }

    @include bp.breakpoint(medium, max) {
      /** Occupy background */
      opacity: 1;
      background-size: cover;
      bottom: 0;
      left: 0%;
      width: 100%;
      height: clamp(400px, 100vh, 800px);
    }
    z-index: 0;
  }

}

.projects {
  z-index: 1;

  @include bp.breakpoint(medium, min) {
    padding: 2em 4em;
  }
  @include bp.breakpoint(medium, max) {
    padding: calc( 4 * var(--gap)) calc( 4 * var(--gap));
  }
}

.digital-garden {
  z-index: 1;
  background-color: var(--surface3);

  @include bp.breakpoint(medium, min) {
    padding: 2em 4em;
  }
  @include bp.breakpoint(medium, max) {
    padding: calc( 4 * var(--gap)) calc( 4 * var(--gap));
  }
}

</style>
