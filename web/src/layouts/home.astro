---
import {HeadingLevel} from '../@types/a11y';
import {Page, toPage, AstroPage, MarkdownPageReference, toPageSummary } from '../lib/page/Page'

import BaseLayout from './base.astro';

import LazyMotion from '../components/LazyMotion/LazyMotion.tsx';
import Picture from '../components/Picture/Picture.tsx';
import ProjectGrid from '../components/Project/ProjectGrid.tsx';
import GardenList, {GardenListVariant} from '../components/Garden/GardenList.tsx';

import RubberBall from '../components/RubberBall/RubberBall.tsx';

let page: Page = await runPageTransforms();

let projects = Astro.fetchContent<MarkdownPageReference>('../pages/projects/**/*.md').map(toPageSummary);
let gardenItems = Astro.fetchContent<MarkdownPageReference>('../pages/garden/**/*.md').sort( (a,b) => {
  // Order by status (first are complete, then in-progresss, finally draft);
  const statusOrder = {'draft': -1, 'in progress': 0, 'complete': 1};
  const [statusA, statusB] = [statusOrder[a.status], statusOrder[b.status]];
  return statusB - statusA;
}).map( toPageSummary );

async function runPageTransforms(){
  return await Promise.resolve(Astro.props.content)
                        .then(concatenateMetadata)
                        .then(toPage)
}

/** add layout absolute path property to the props */
function concatenateMetadata( astroPage: AstroPage ) {
  return {
    layout: Astro.request.url.pathname,
    url: Astro.request.url,
    ...astroPage,
  }
}

---

<BaseLayout {page}>

  <section class="home" aria-labelledby="welcome">
    <div class="home-grid">
      <div class="item highlight">
        <slot />
      </div>
      <img  class="decoration" src="/pictures/Philodentrum.webp" alt="Astro logo" />
    </div>
  </section>

  <section class="projects">
    <h2 class="title1 pad4-y">What i've worked on</h2>
    <ProjectGrid
      TitleHeadingLevel={HeadingLevel.h3}
      projects={projects}
      client:idle />
    <div class="pad4"/>
  </section>

  <section class="digital-garden">
    <h2 class="title1 pad4-y">
      <Picture src="/pictures/spectabrite6.png" height="76px" />
    Digital Garden
    </h2>
    <GardenList
      items={gardenItems}
      TitleHeadingLevel={HeadingLevel.h3}
      variant={GardenListVariant.WITH_SUBTITLE} />
    <div class="pad4"/>
  </section>

  <!-- <RubberBall client:idle /> -->
  <!-- <RubberBall client:media={'(min-width: 426px), (prefers-reduced-motion: reduce)'} /> -->
</BaseLayout>

<style lang="scss" global hoist>
  @use "sass:math";
  @use "src/styles/grids" as grids;
  @use "src/styles/breakpoints" as bp;
  @use "src/styles/helpers" as h;

  $fold: 80vh;
  .home {
    width: 100%;
    height: $fold;
  }

  .home-grid {
    position: relative;
    height: 100%;

    $gap: 0px;

    @include grids.grid(6, $gap);
    grid-template-rows: repeat(4, math.div($fold, 4) );

    .highlight {
      grid-column: 4 / span 3;
      grid-row: 2 / span 3;

      position: relative;
      display: flex;
      flex-direction: column;
      justify-content: space-evenly;

      isolation: isolate;
      z-index: 100;
      overflow: hidden;

      padding: calc( var(--gap) * 4);

      background: linear-gradient(
        to bottom,
        transparent 0%,
        hsl(var(--brand-hue) var(--brand-saturation) 100% / 0.79) 30%,
        hsl(var(--brand-hue) var(--brand-saturation) 100% / 0.79) 70%,
        transparent 100%
      );


      // @include bp.breakpoint(medium, max) {
      //   grid-row: 2 / span 4;
      //   justify-content: space-evenly;
      // }

      .heading-spotlight {
        font-family: var(--subtitle-family);
        font-size: calc( var(--h1) * 1.1 );
        @include h.weight(var(--subtitle-weight));
        margin: 0;
      }
      .heading-title {
        font-family: var(--subtitle-family);
        font-size: calc( var(--h3) );
        @include h.weight(var(--subtitle-weight));
        margin: 0;
      }
      .heading-subtitle {
        font-size: var(--h5);
      }
    }

    .decoration {
      grid-column: 1 / span 6;
      grid-row: 1 / span 6;

      position: relative;
      object-fit: contain;
    
      @include bp.breakpoint(medium, min) {
        /** Occupy left part of screen */
        bottom: -5vh;
        left: -22.5%;
        width: 100%;
        height: clamp(400px, $fold, 800px);
      }

      @include bp.breakpoint(medium, max) {
        /** Occupy background */
        opacity: 1;
        bottom: -5vh;
        left: 0%;
        height: clamp(400px, $fold, 800px);
      }
    }    
  }

  .projects, .digital-garden {
    background-color: var(--surface3);

    @include bp.breakpoint(medium, min) {
      padding: 2em 4em;
    }
    @include bp.breakpoint(medium, max) {
      padding: calc( 4 * var(--gap)) calc( 4 * var(--gap));
    }
  }

  .card.Iching-Index .avatar img {
    opacity: 0.8;
    -webkit-transform-origin: 50%  50%;
    transform: scale(2.5) rotate(180deg);
  }

  .card.Iching-Index:hover .avatar img,
  .card.Iching-Index:focus .avatar img {
    opacity: 1;
    transform: scale(4.8) rotate(240deg);
  }
</style>