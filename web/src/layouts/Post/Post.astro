---
import {relative,dirname} from 'node:path'
import BaseLayout from '../base.astro';
import {Page, toPage} from '../../lib/page/Page';

import Masthead from '../../components/Masthead';
import Tag, {TagVariant} from '../../components/Tag/Tag';

import {cn,fromISOString, toUnixTimestamp, toDMYDateString, emojifyStatus} from '../../lib/helpers';
import {buildHTMLTransformerFn , HTMLTransformFn} from '../../lib/html';

/** @ts-ignore */
const abspath = import.meta.url.pathname;
const astroContextSymbol = Symbol.for('astro.context');
const astroContext = Astro.props[astroContextSymbol];

let page:Page = toPage({
  layout: abspath,
  ...Astro.props.content,
  [astroContextSymbol]: astroContext
});

function resolveRelativeToCwd( path: string ) {
  /** @ts-ignore */
  const cwd = dirname(import.meta.url.pathname)
  const relativeToPagePath = relative(cwd, path );
  return relativeToPagePath;
}

const transformRelativeImagePath = buildHTMLTransformerFn( 'img[src^="./"]',  (el,ctx) => {
  const targetPath = dirname(page.abspath);
  const relativeTargetPath = resolveRelativeToCwd( targetPath );
  const src = el.attr('src');
  el.attr('src', Astro.resolve(relativeTargetPath + src.slice(1)) );
});

let content = transformRelativeImagePath( page.content.content );
content = content.replace(/ASTRO_ESCAPED_LEFT_CURLY_BRACKET/g, '{')

---

<BaseLayout {page}>
  <article id="content">
    <link rel="stylesheet" href="/styles/prism/solarizedLight.css" />
    <Masthead className="post-masthead surface4"
      title={page.content.title}
      subtitle={page.content.subtitle}
    >
      {page.tags && (
        <div class="metadata-container" aria-label="Tagged as">
          <span class="date-container">
            <Tag className="status" variant={TagVariant.TRANSPARENT} aria-label={page.status}>{emojifyStatus(page.status)}</Tag>
            <time
              className="publishedAt"
              dateTime={page.publishedAt.toString()}
              aria-label={`Published at: ${toDMYDateString(page.publishedAt)}`}
            >
              {toDMYDateString(page.publishedAt)}
            </time>
          </span>
          <span class="tags-container" aria-label="Tagged as">
            {page.tags.map(tag => <Tag className="tag" variant={TagVariant.TRANSPARENT}>{tag}</Tag>)}
          </span>
        </div>
      )}
    </Masthead>
    <div class="post">
      {content}
    </div>
  </article>
</BaseLayout>

<style lang="scss" global>
@use "src/styles/grids" as grids;
@use "src/styles/helpers" as h;

.post-masthead {
  .content-container {
    max-width: 80vw;
    padding-left: 0;
    padding-right: 0;
  }

  .metadata-container {
    display: flex;
    align-items: center;
    justify-content: flex-start;

    margin-block-start: 3em;

    .date-container, .tags-container {
      display: flex;
      align-items: center;
      justify-content: flex-start;
    }
    .tags-container {
      margin-left: auto;
    }
    .status {
      font-style: normal;
      font-size: 1.25em;
    }

    dl {
      margin-block-start: 0;
      margin-block-end: 0;
    }
    dd {
      margin-inline-start: 0;
    }

    dfn + dfn {
      margin-left: calc( 2 * var(--gap));
    }
  }
}

.post  {
  max-width: 1440px;
  position: relative;
  width: 75vw;
  width: clamp(16rem, 75vw, 90rem);
  margin: 3em auto;

  // > p:first-of-type::first-letter {
  //   font-family: var(--title-family);
  //   float: left;
  //   font-size: 4em;
  //   line-height: 0.65;
  //   margin: 0.1em 0.15em 0em 0px;
  // }

  a:not(.footnote-ref,.footnote-backref) {
    @include h.link-text;
  }
  a.footnote-backref {
    padding: 0 var(--gap);
    text-decoration: none;
  }

  img {
    max-width: 100%;
    display: flex;
    margin: 0 auto;
  }
  figcaption {
    text-align: center;
    color: var(--text2);
    font-style: italic;
  }


  /** Headers */
  .title {
      /** Headings of text shoul be smooth */
    --title-weight: var(--subtitle-weight);


    position: relative;
    max-width: 50ch;

    /** Headings links */
    a {
      position: absolute;
    }
  }

  /**
    * Adjacent spacement fixes
    */
  p > code,
  li > code {
    font-size: 100%;
    padding: var(--gap) calc(var(--gap) * 1.5 );
    background-color: var(--surface3);
    border-radius: var(--gap);
  }

  /* Adjacent list elements */
   ul + p ,
   ol + p {
    margin-top: 1.5rem;
  }


  /** lists */
  ol, ul {
    margin-block-start: 0;
    padding-inline-start: 1em;
  }

  ol li::marker {
    font-size: 1.2rem;
  }

  ul li::marker {
    color: var(--text2);
    font-size: 1rem;
  }

  /** Codes & Blockquotes */
  pre {
    padding: calc(4 * var(--gap));
    border-radius: var(--gap);
    margin: 0 0 1rem 0;
    background-color: var(--surface3);
    overflow: auto;
  }

  pre,
  code,
  pre code {
    font-family: var(--code-family);
    font-size: var(--s0);
    font-weight: var(--code-weight);
    text-shadow: none;
    overflow: hidden;
  }

  blockquote {
    width: 100%;
    margin: 0 0 1.5rem 0;
    font-size: 1.5rem;
    padding-left: calc(2 * var(--gap));
    position: relative;

    > p {
      font-size: inherit;
      font-style: italic;

      &::before {
        position: absolute;
        opacity: 0.9;
        top: -0.5em;
        left: -0.5em;
        width: 1em;
        height: 1em;
        font-size: 6rem;
        font-weight: bold;
        content: "\201C";
        color: var(--surface3);
      }
    }
  }

  /**
   * Tables
   */
  table {
    margin-bottom: 1.5rem;
    border-spacing: 0px;
    border-top: 0px;
    overflow: hidden;

    thead {
      background-color: var(--brand);
      color: var(--text1-invert);

      & th {
        font-size: 1.0rem;
        font-weight: var(--code-weight);
        text-align: center;
      }
    }
    tr:not(:last-child) {
      & td {
        border-bottom: 1px solid var(--surface2);
      }
    }
    & tr:last-child {
      & td {
        border-bottom: 1px solid var(--surface2);
      }
    }

    & th,
    & td {
      font-family: var(--code-family);
      font-weight: var(--code-weight);
      font-size: var(--s0);
      padding: calc(2 * var(--gap));
      border-right: 1px solid var(--surface2);

      &:first-of-type {
        border-left: 1px solid var(--surface2);
      }
    }
  }

    hr {
      margin: 1em 0em;
      border: 0;
      height: 1px;
      background-image: radial-gradient(circle at center, var(--surface4),transparent)
    }


  /**
   *
   */
  .footnotes {
    ol {
      margin-left: 1em;
    }
  }

  /**
   * Images float
   */
  .right-25 {
    float: right;
    width: 25%;
    padding: 1em;
  }

  .centered {
    display: flex;
    flex-direction: column;

    > img {
      margin: 0 auto;
    }
  }
}

.surface {
  min-height: 120px;
  width: 80%;
  border-radius: calc( var(--gap) * 4 );
  display: flex;
  align-items: center;
  justify-content: center;

  @include h.shadow();
}

</style>
