---
import { Markdown } from 'astro/components';
import BaseLayout from '../layouts/base.astro';
import {cn,toDMYDateString, emojifyStatus} from '~/lib/helpers';

import FlashlightEffect from '../components/FlashlightEffect/FlashlightEffect.tsx'

import {listProjects} from './projects';
import {listGarden} from './garden';

import ProjectGrid from '../components/Project/ProjectGrid.tsx';
import Card from '../components/Card/Card.tsx';
import Tag from '../components/Tag/Tag.tsx';

let content = {
  title: 'Hello World',
  description: 'Index description',
  schema: 'article'
};
let projects: MarkdownPage[] = await listProjects();
let gardenItems: GardenPage[] = await listGarden();

---

<BaseLayout {content}>
  <div id="content">
    <section class="home" aria-labelledby="welcome">
      <div class="home-grid">
        <div class="item highlight pad4">
          <div role="heading" aria-level="1" id="welcome" class="caption">
            Hi üëã<br/>
            I'm <strong>Vitor</strong><br/>
            I write software for the web
          </div>
        </div>
        <div class="item highlight2 pad4">
          <div class="caption">
            Hi üôè <br/>
            I'm <strong>Vitor</strong><br/>
            I write software for the web
          </div>
        </div>
        <div class="item decoration">
          <img alt="nada" src="/pictures/Dieffenbachia robusta.png" />
        </div>
      </div>
    </section>

    <section class="pad4">
      <h2>Projects</h2>
      <ProjectGrid projects={projects} client:idle />
      <div class="pad4"/>
    </section>

    <section class="pad4">
      <h2>Digital Garden</h2>
      <ul class="garden-list">
        {gardenItems.map((garden) => (
          <li class={cn(garden.slug)} >
            <div class="garden-item">
              <h4 class="title"><a href={garden.url.pathname}>{garden.content.title}</a></h4>
              {garden.collection && (
                <dl class="tags-container" aria-label="in collection">
                  <Tag className="collection">{garden.collection}</Tag>
                </dl>
              )}
              <dl class="extra-container">
                <dd class="status" aria-label={`Published at: ${toDMYDateString(garden.publishedAt)}`}><em>{toDMYDateString(garden.publishedAt)}</em></dd>
                <Tag className="status" variant="transparent" aria-label={garden.status}>{emojifyStatus(garden.status)}</Tag>
              </dl>
            </div>
          </li>
        ))}
      </ul>
      <div class="pad4"/>
    </section>
  </div>

</BaseLayout>

<style lang="scss" scoped>
@use "sass:math";
@use "src/styles/breakpoints" as bp;
@use "src/styles/grids" as grids;
@use "src/styles/typo" as typo;

#content {
  position: relative;
}

$fold: 100vh;
.home {
  width: 100%;
  height: $fold;
}

.home-grid {
  height: 100%;

  $gap: 0px;
  @include grids.grid(6, $gap);
  grid-template-rows: repeat(4, math.div( $fold, 4 ));

  :global(.highlight){
    grid-column: 4 / span 4;
    grid-row: 1 / span 3;

    display: flex;
    flex-direction: column;
    justify-content: flex-end;

    // background-color: var(--brand);
    // color: var(--text1-invert);

    > :global(.caption) {
      font-family: var(--title-family);
      font-size: calc( var(--h1) * 1.1 );
      @include typo.weight(var(--text-weight));

      margin-bottom: 1em;
      // font-variation-settings: "wght" 200;
    }
  }
  :global(.highlight2) {
    grid-column: 4 / span 4;
    grid-row: 4;
  }
  :global(.decoration) {
    grid-column: 1 / span 3;
    grid-row: 1/ span 4;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    justify-content: flex-end;

    > img {
      height: 100%;
    }
  }
}


.garden-list {
  list-style: decimal;
  padding-inline-end: calc( 8 * var(--gap));
  padding-inline-start: calc( 8 * var(--gap));

  li {
    margin-block-end: 1em;
    margin-block-start: 1em;
    color: var(--text2);

    &::marker {
      font-size: var(--h4);
    }

    .garden-item {
      display: flex;
      align-items: center;
      justify-content: flex-end;

      a {
        @include typo.link-text;
      }
      .title {
        @include typo.weight(var(--text-weight));
        margin-block-start: 0;
        margin-block-end: 0;
        margin-right: auto;
      }
    }
  }

  :global(.tags-container) {
    display: inline-flex;
    align-items: center;
    margin-block-start: 0;
    margin-block-end: 0;

  }

  :global(.extra-container) {
    display: inline-flex;
    align-items: center;
    margin-block-start: 0;
    margin-block-end: 0;
  }

  dd { margin-inline-start: 0; padding: calc(2 * var(--gap)); }

  /** Adjacent tags */
  :global(dd + dd),
  :global(dl + dl) {
    margin-left: var(--gap);
  }
}
</style>
