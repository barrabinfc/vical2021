---
import { Markdown } from 'astro/components';
import BaseLayout from '../layouts/base.astro';

import {listProjects} from './projects';
import Card from '../components/Card/Card.tsx';

let content = {
  title: 'Hello World',
  description: 'Index description',
  schema: 'article'
};
let projects: Projects[] = await listProjects();
---

<!DOCTYPE html>
<BaseLayout {content}>
  <article id="content">
    <section class="home">
      <div class="home-grid">
        <div class="item highlight pad4">
          <div class="caption">
            Hi üëã<br/>
            I'm <strong>Vitor</strong><br/>
            I write software for the web
          </div>
        </div>
        <div class="item highlight2 pad4">
          <div class="caption">
            Hi üôè <br/>
            I'm <strong>Vitor</strong><br/>
            I write software for the web
          </div>
        </div>
        <div class="item decoration">
          <img alt="nada" src="/pictures/Dieffenbachia robusta.png" />
        </div>
      </div>
    </section>

    <section class="pad4">
      <h1>Projects</h1>
      <ul class="project-grid">
        {projects.slice(0, 3).map((project) => (
          <Card
            href={project.path}
            avatar={project.avatar}
            content={project.content}
            className={`item ${project.slug}`}
            />
        ))}
      </ul>
      <div class="pad4"/>
    </section>
  </article>
</BaseLayout>

<style lang="scss" scoped>
@use "sass:math";
@use "public/styles/breakpoints" as bp;
@use "public/styles/grids" as grids;

#content {
  position: relative;
}

$fold: 100vh;
.home {
  width: 100%;
  height: $fold;
}

.home-grid {
  height: 100%;

  $gap: 0px;
  @include grids.grid(6, $gap);
  grid-template-rows: repeat(4, math.div( $fold, 4 ));

  :global(.highlight){
    grid-column: 4 / span 4;
    grid-row: 1 / span 3;

    display: flex;
    flex-direction: column;
    justify-content: flex-end;

    // background-color: var(--brand);
    // color: var(--text1-invert);

    .caption {
      font-family: var(--title-family);
      font-size: calc( var(--h1) * 1.1 );
      font-weight: 200;
      margin-bottom: 1em;
      // font-variation-settings: "wght" 200;
    }
  }
  :global(.highlight2) {
    grid-column: 4 / span 4;
    grid-row: 4;
  }
  :global(.decoration) {
    grid-column: 1 / span 3;
    grid-row: 1/ span 4;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    justify-content: flex-end;

    > img {
      height: 100%;
    }
  }
}

.project-grid {
  $columns: 3;
  $gap: 32px;
  $itemWidth: calc(#{math.div(100%, $columns)} - #{$gap});

  @include grids.flexGrid($columns, $gap);


  @include bp.breakpoint(medium, min) {
    :global(.item:nth-child(1n)) {
      flex: 0 0 33%;
    }
    :global(.item:nth-child(2n)) {
      flex: 0 0  calc(2 * #{$itemWidth});
    }
    :global(.item:nth-child(3n)) {
      flex: 0 0  calc(3 * #{$itemWidth});
    }
  }

}
</style>
